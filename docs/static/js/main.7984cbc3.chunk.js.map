{"version":3,"sources":["assets/img/no-profile.png","assets/img/mycat.jpeg","components/AnswersList.jsx","components/Answer.jsx","components/Chats.jsx","components/Chat.jsx","components/Forms/TextInput.jsx","components/Forms/FromDialog.jsx","firebase/config.js","firebase/index.js","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","AnswersList","props","className","answers","map","value","index","content","nextId","key","toString","select","useStyles","makeStyles","createStyles","borderColor","color","fontWeight","marginBottom","backgroundColor","Answer","classes","Button","button","variant","onClick","height","padding","overflow","Chats","List","chats","id","chat","text","type","Chat","isQuestion","ListItem","ListItemAvatar","Avatar","alt","src","MyCat","NoProfile","TextInput","TextField","fullWidth","label","margin","multiline","rows","onChange","FromDialog","inputName","event","setState","name","target","inputEmail","email","inputDiscription","discription","submitFrom","payload","state","fetch","method","body","JSON","stringify","then","alert","handleClose","description","bind","Dialog","open","this","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogActions","autoFocus","React","Component","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","db","firestore","App","useState","setAnswers","setChats","currentId","setCurrentId","dataset","setDataset","setOpen","displaynextQuestion","nextQuestionId","nextDataset","addChats","question","prevChats","handleClickOpen","useCallback","useEffect","a","initDataset","collection","get","snapshots","forEach","doc","data","scrollArea","document","getElementById","scrollTop","scrollHeight","selectedAnswer","test","createElement","href","click","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7984cbc3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no-profile.a990286c.png\";","module.exports = __webpack_public_path__ + \"static/media/mycat.3e47514a.jpeg\";","import React from 'react'\nimport {Answer} from './index'\n\nconst AnswersList = (props) => {\n    return(\n        <div className=\"c-grid__answer\">\n            {props.answers.map((value, index) => {\n                return <Answer content={value.content} nextId={value.nextId} key={index.toString()} select={props.select} />\n            })}\n        </div>\n    )\n}\n\nexport default AnswersList","import React from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(() => (\n    createStyles({\n        \"button\": {\n            borderColor:\"#F3CA3E\",\n            color:\"#F3CA3E\",\n            fontWeight:600,\n            marginBottom:\"8px\",\n            \"&:hover\": {\n                backgroundColor:\"#F3CA3E\",\n                color:\"#fff\",\n            }\n        }\n    })\n));\n\nconst Answer = (props) => {\n    const classes = useStyles();\n\n    return(\n        <Button className={classes.button} variant=\"outlined\" onClick={()=>{props.select(props.content ,props.nextId)}}>\n            {props.content}\n        </Button>\n    )\n}\n\nexport default Answer","import React from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport {Chat} from './index';\n\n\nconst useStyles = makeStyles(() => (\n    createStyles({\n        \"chats\": {\n            height: 400,\n            padding: \"0\",\n            overflow: \"auto\",\n        }\n    })\n));\n\nconst Chats = (props) => {\n    const classes = useStyles();\n\n    return(\n        <List className={classes.chats} id={\"scroll-area\"} >\n            {props.chats.map((chat, index) => {\n                return <Chat text={chat.text} type={chat.type} key={index.toString()} />\n            })}\n        </List>\n    )\n}\n\nexport default Chats","import React from 'react'\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport NoProfile from '../assets/img/no-profile.png'\nimport MyCat from '../assets/img/mycat.jpeg'\n\nconst Chat = (props) => {\n    const isQuestion = (props.type === 'question');\n    const classes = isQuestion ? 'p-chat__row' : 'p-chat__reverse';\n\n    return(\n        <ListItem className={classes}>\n            <ListItemAvatar>\n                {isQuestion ? (\n                    <Avatar alt=\"icon\" src={MyCat} />\n                ): (\n                    <Avatar alt=\"icon\" src={NoProfile} />\n                )}\n            </ListItemAvatar>\n            <div className=\"p-chat__bubble\">\n                {props.text}\n            </div>\n        </ListItem>\n    )\n}\n\nexport default Chat","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\n\nconst TextInput = (props) => {\n    return(\n        <TextField \n            fullWidth={true}\n            label={props.label}\n            margin={\"dense\"} \n            multiline={true}\n            rows={props.rows}\n            value={props.value}\n            type={props.type}\n            onChange={props.onChange}\n        />\n    )\n}\n\nexport default TextInput","import React from \"react\"\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextInput from './TextInput';\n\nexport default class FromDialog extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            name: \"\",\n            email: \"\",\n            description: \"\"\n        }\n\n        this.inputName = this.inputName.bind(this)\n        this.inputEmail = this.inputEmail.bind(this)\n        this.inputDiscription = this.inputDiscription.bind(this)\n    }\n\n    inputName = (event) => {\n        this.setState({ name: event.target.value })\n    }\n\n    inputEmail = (event) => {\n        this.setState({ email: event.target.value })\n    }\n\n    inputDiscription = (event) => {\n        this.setState({ discription: event.target.value })\n    }\n\n    submitFrom = () => {\n        const name = this.state.name;\n        const email = this.state.email;\n        const discription = this.state.discription;\n\n        const payload = {\n            text: 'お問い合わせがありました\\n'+\n                  'お名前:' + name + '\\n' + \n                  'Email:' + email + '\\n' +\n                  'お問い合わせ内容\\n' + discription\n        }\n\n        const url = 'https://hooks.slack.com/services/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'\n\n        fetch(url,{\n            method: 'POST',\n            body: JSON.stringify(payload)\n        }).then(()=>{\n            alert('送信が完了しました。追ってご連絡します！');\n            this.setState({\n                name: \"\",\n                email: \"\",\n                discription: \"\"\n            })\n            return this.props.handleClose()\n        })\n    }\n\n    render(){\n        return(\n        <Dialog\n            open={this.props.open}\n            onClose={this.props.handleClose}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">お問い合わせフォーム</DialogTitle>\n            <DialogContent>\n                <TextInput\n                    label={\"お名前(必須)\"} multiline={false} rows={1}\n                    value={this.state.name} type={\"text\"} onChange={this.inputName}\n                />\n                <TextInput\n                    label={\"メールアドレス(必須)\"} multiline={false} rows={1}\n                    value={this.state.email} type={\"email\"} onChange={this.inputEmail}\n                />\n                <TextInput\n                    label={\"お問い合わせ内容(必須)\"} multiline={true} rows={5}\n                    value={this.state.discription} type={\"text\"} onChange={this.inputDiscription}\n                />\n            </DialogContent>\n            <DialogActions>\n            <Button onClick={this.props.handleClose} color=\"primary\">\n                キャンセル\n            </Button>\n            <Button onClick={this.submitFrom} color=\"primary\" autoFocus>\n                送信する\n            </Button>\n            </DialogActions>\n        </Dialog>\n        )\n    }\n}","const firebaseConfig = {\n    apiKey: \"AIzaSyDmGtzmfKeKvHEOHtNYODORoYRTm1YXcnY\",\n    authDomain: \"chatbot0619.firebaseapp.com\",\n    databaseURL: \"https://chatbot0619.firebaseio.com\",\n    projectId: \"chatbot0619\",\n    storageBucket: \"chatbot0619.appspot.com\",\n    messagingSenderId: \"609622800388\",\n    appId: \"1:609622800388:web:912cacbb3cc67230945d51\",\n    measurementId: \"G-B2M3021E3Q\"\n};\n\nexport default firebaseConfig","import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport firebaseConfig from './config';\n\nfirebase.initializeApp(firebaseConfig);\nexport const db = firebase.firestore();","import React, {useState, useEffect, useCallback} from 'react';\nimport './assets/styles/style.css';\nimport {AnswersList, Chats} from './components/index'\nimport FromDialog from './components/Forms/FromDialog';\nimport {db} from './firebase/index'\nimport { ThemeProvider } from '@material-ui/core';\n\nconst App = () => {\n  const [answers, setAnswers] = useState([]);\n  const [chats, setChats] = useState([]);\n  const [currentId, setCurrentId] = useState(\"init\");\n  const [dataset, setDataset] = useState({});\n  const [open, setOpen] = useState(false);\n\n  const displaynextQuestion = (nextQuestionId, nextDataset) => {\n    addChats({\n      text: nextDataset.question,\n      type: 'question'\n    })\n\n    setAnswers(nextDataset.answers)\n    setCurrentId(nextQuestionId)\n  }\n\n  const selectAnswer = (selectedAnswer, nextQuestionId) => {\n    switch(true){\n\n      case (nextQuestionId === 'contact'):\n        handleClickOpen();\n        break;\n\n      case (/https:*/.test(nextQuestionId)):\n        const a = document.createElement('a');\n        a.href = nextQuestionId;\n        a.target = '_blank';\n        a.click();\n        break;\n        \n      default:\n        addChats({\n          text:selectedAnswer,\n          type: 'answer'\n        })\n\n        setTimeout(() => displaynextQuestion(nextQuestionId, dataset[nextQuestionId]),1000)\n        break;\n    }\n  }\n\n  const addChats = (chat) => {\n    setChats(prevChats => {\n      return [...prevChats, chat]\n    })\n  }\n\n  const handleClickOpen = () => {\n    setOpen(true)\n  };\n\n  const handleClose = useCallback(() => {\n    setOpen(false)\n  }, [setOpen]);\n\n  useEffect(() => {\n    (async() => {\n      const initDataset = {}\n      await db.collection('questions').get().then(snapshots => {\n        snapshots.forEach(doc => {\n          const id = doc.id\n          const data = doc.data()\n          initDataset[id] = data\n        })\n      })\n\n      setDataset(initDataset)\n      displaynextQuestion(currentId, initDataset[currentId])\n    })()\n  },[])\n\n  useEffect(() => {\n    const scrollArea = document.getElementById('scroll-area');\n    if(scrollArea){\n      scrollArea.scrollTop = scrollArea.scrollHeight\n    }\n  })\n\n  return (\n    <section className=\"c-section\">\n      <div className=\"c-box\">\n        <Chats chats={chats} />\n        <AnswersList answers={answers} select={selectAnswer} />\n        <FromDialog open={open} handleClose={handleClose} />\n      </div>\n    </section>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}